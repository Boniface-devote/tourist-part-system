
courseWork.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  0000046e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001282  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8e  00000000  00000000  0000186e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d8  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00002bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d2  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000548  00000000  00000000  0000335a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000038a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	d0 c1       	rjmp	.+928    	; 0x3a6 <__vector_1>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	c3 d0       	rcall	.+390    	; 0x296 <main>
 110:	ac c1       	rjmp	.+856    	; 0x46a <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <latch>:
void over10(){
	char text[] = "Above 10 years";
	for (int i = 0; i <= strlen(text); i ++){
		data(text[i]);
	}
}
 114:	a5 9a       	sbi	0x14, 5	; 20
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <latch+0x6>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <latch+0xc>
 120:	00 00       	nop
 122:	a5 98       	cbi	0x14, 5	; 20
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <latch+0x14>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <latch+0x1a>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <data>:
 132:	a3 9a       	sbi	0x14, 3	; 20
 134:	a4 98       	cbi	0x14, 4	; 20
 136:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 13a:	ec cf       	rjmp	.-40     	; 0x114 <latch>
 13c:	08 95       	ret

0000013e <cmd>:
 13e:	a3 98       	cbi	0x14, 3	; 20
 140:	a4 98       	cbi	0x14, 4	; 20
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
 146:	e6 cf       	rjmp	.-52     	; 0x114 <latch>
 148:	08 95       	ret

0000014a <wel>:
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	2b 97       	sbiw	r28, 0x0b	; 11
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	f8 94       	cli
 160:	de bf       	out	0x3e, r29	; 62
 162:	0f be       	out	0x3f, r0	; 63
 164:	cd bf       	out	0x3d, r28	; 61
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	ea df       	rcall	.-44     	; 0x13e <cmd>
 16a:	8b e0       	ldi	r24, 0x0B	; 11
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	f2 e0       	ldi	r31, 0x02	; 2
 170:	de 01       	movw	r26, r28
 172:	11 96       	adiw	r26, 0x01	; 1
 174:	01 90       	ld	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	8a 95       	dec	r24
 17a:	e1 f7       	brne	.-8      	; 0x174 <wel+0x2a>
 17c:	8e 01       	movw	r16, r28
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	7e 01       	movw	r14, r28
 184:	8d e0       	ldi	r24, 0x0D	; 13
 186:	e8 0e       	add	r14, r24
 188:	f1 1c       	adc	r15, r1
 18a:	f8 01       	movw	r30, r16
 18c:	81 91       	ld	r24, Z+
 18e:	8f 01       	movw	r16, r30
 190:	d0 df       	rcall	.-96     	; 0x132 <data>
 192:	0e 15       	cp	r16, r14
 194:	1f 05       	cpc	r17, r15
 196:	c9 f7       	brne	.-14     	; 0x18a <wel+0x40>
 198:	2b 96       	adiw	r28, 0x0b	; 11
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	1f 91       	pop	r17
 1aa:	0f 91       	pop	r16
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	08 95       	ret

000001b2 <regi>:
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	28 97       	sbiw	r28, 0x08	; 8
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	b6 df       	rcall	.-148    	; 0x13e <cmd>
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	eb e0       	ldi	r30, 0x0B	; 11
 1d6:	f2 e0       	ldi	r31, 0x02	; 2
 1d8:	de 01       	movw	r26, r28
 1da:	11 96       	adiw	r26, 0x01	; 1
 1dc:	01 90       	ld	r0, Z+
 1de:	0d 92       	st	X+, r0
 1e0:	8a 95       	dec	r24
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <regi+0x2a>
 1e4:	8e 01       	movw	r16, r28
 1e6:	0f 5f       	subi	r16, 0xFF	; 255
 1e8:	1f 4f       	sbci	r17, 0xFF	; 255
 1ea:	7e 01       	movw	r14, r28
 1ec:	8a e0       	ldi	r24, 0x0A	; 10
 1ee:	e8 0e       	add	r14, r24
 1f0:	f1 1c       	adc	r15, r1
 1f2:	f8 01       	movw	r30, r16
 1f4:	81 91       	ld	r24, Z+
 1f6:	8f 01       	movw	r16, r30
 1f8:	9c df       	rcall	.-200    	; 0x132 <data>
 1fa:	0e 15       	cp	r16, r14
 1fc:	1f 05       	cpc	r17, r15
 1fe:	c9 f7       	brne	.-14     	; 0x1f2 <regi+0x40>
 200:	28 96       	adiw	r28, 0x08	; 8
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	f8 94       	cli
 206:	de bf       	out	0x3e, r29	; 62
 208:	0f be       	out	0x3f, r0	; 63
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	08 95       	ret

0000021a <under10>:
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	2f 97       	sbiw	r28, 0x0f	; 15
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	8f e0       	ldi	r24, 0x0F	; 15
 23c:	e3 e1       	ldi	r30, 0x13	; 19
 23e:	f2 e0       	ldi	r31, 0x02	; 2
 240:	de 01       	movw	r26, r28
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	01 90       	ld	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	8a 95       	dec	r24
 24a:	e1 f7       	brne	.-8      	; 0x244 <under10+0x2a>
 24c:	ce 01       	movw	r24, r28
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	7c 01       	movw	r14, r24
 252:	00 e0       	ldi	r16, 0x00	; 0
 254:	10 e0       	ldi	r17, 0x00	; 0
 256:	6c 01       	movw	r12, r24
 258:	f7 01       	movw	r30, r14
 25a:	81 91       	ld	r24, Z+
 25c:	7f 01       	movw	r14, r30
 25e:	69 df       	rcall	.-302    	; 0x132 <data>
 260:	0f 5f       	subi	r16, 0xFF	; 255
 262:	1f 4f       	sbci	r17, 0xFF	; 255
 264:	f6 01       	movw	r30, r12
 266:	01 90       	ld	r0, Z+
 268:	00 20       	and	r0, r0
 26a:	e9 f7       	brne	.-6      	; 0x266 <under10+0x4c>
 26c:	31 97       	sbiw	r30, 0x01	; 1
 26e:	ec 19       	sub	r30, r12
 270:	fd 09       	sbc	r31, r13
 272:	e0 17       	cp	r30, r16
 274:	f1 07       	cpc	r31, r17
 276:	80 f7       	brcc	.-32     	; 0x258 <under10+0x3e>
 278:	2f 96       	adiw	r28, 0x0f	; 15
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	08 95       	ret

00000296 <main>:

int main(void)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	2a 97       	sbiw	r28, 0x0a	; 10
 2a0:	0f b6       	in	r0, 0x3f	; 63
 2a2:	f8 94       	cli
 2a4:	de bf       	out	0x3e, r29	; 62
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	cd bf       	out	0x3d, r28	; 61
	DDRD=0b00000000;
 2aa:	1a b8       	out	0x0a, r1	; 10
	DDRG=0b11111111;
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	83 bb       	out	0x13, r24	; 19
	DDRJ=0b00000111;
 2b0:	97 e0       	ldi	r25, 0x07	; 7
 2b2:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <__TEXT_REGION_LENGTH__+0x700104>
	DDRF=0b11111111;
 2b6:	80 bb       	out	0x10, r24	; 16
	EIMSK |= (1 << INT0);
 2b8:	e8 9a       	sbi	0x1d, 0	; 29
	sei();
 2ba:	78 94       	sei
	char str[10];
	
	cmd(0x0f);
 2bc:	8f e0       	ldi	r24, 0x0F	; 15
 2be:	3f df       	rcall	.-386    	; 0x13e <cmd>
	cmd(0x3f);
 2c0:	8f e3       	ldi	r24, 0x3F	; 63
 2c2:	3d df       	rcall	.-390    	; 0x13e <cmd>
	
    while (1) 
    {    //keypad
		
		
		PORTJ = 0b11111011;
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f5 e0       	ldi	r31, 0x05	; 5
 2c8:	ef 2e       	mov	r14, r31
 2ca:	ff 24       	eor	r15, r15
 2cc:	f3 94       	inc	r15
 2ce:	f0 2d       	mov	r31, r0
 2d0:	0f 2e       	mov	r0, r31
 2d2:	fb ef       	ldi	r31, 0xFB	; 251
 2d4:	bf 2e       	mov	r11, r31
 2d6:	f0 2d       	mov	r31, r0
		
		//check 1
		if ((PINJ & 0b00001000) == 0){
 2d8:	03 e0       	ldi	r16, 0x03	; 3
 2da:	11 e0       	ldi	r17, 0x01	; 1
			data('7');
	
		}
		
		
		PORTJ = 0b11111101;
 2dc:	0f 2e       	mov	r0, r31
 2de:	fd ef       	ldi	r31, 0xFD	; 253
 2e0:	cf 2e       	mov	r12, r31
 2e2:	f0 2d       	mov	r31, r0
		else if ((PINJ & 0b00100000) == 0){
			
			data('8');
		}
		
		PORTJ = 0b11111110;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	fe ef       	ldi	r31, 0xFE	; 254
 2e8:	df 2e       	mov	r13, r31
 2ea:	f0 2d       	mov	r31, r0
	
    while (1) 
    {    //keypad
		
		
		PORTJ = 0b11111011;
 2ec:	f7 01       	movw	r30, r14
 2ee:	b0 82       	st	Z, r11
		
		//check 1
		if ((PINJ & 0b00001000) == 0){
 2f0:	f8 01       	movw	r30, r16
 2f2:	80 81       	ld	r24, Z
 2f4:	83 fd       	sbrc	r24, 3
			data('1');
 2f6:	0c c0       	rjmp	.+24     	; 0x310 <main+0x7a>
 2f8:	81 e3       	ldi	r24, 0x31	; 49
 2fa:	1b df       	rcall	.-458    	; 0x132 <data>
			strncat(str, '1', 1);
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	61 e3       	ldi	r22, 0x31	; 49
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	ce 01       	movw	r24, r28
 306:	01 96       	adiw	r24, 0x01	; 1
			data(str[0]);
 308:	a0 d0       	rcall	.+320    	; 0x44a <strncat>
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	12 df       	rcall	.-476    	; 0x132 <data>
 30e:	0d c0       	rjmp	.+26     	; 0x32a <main+0x94>
			
		}
		
		//check 4
		else if ((PINJ & 0b00010000) == 0){
 310:	f8 01       	movw	r30, r16
 312:	80 81       	ld	r24, Z
 314:	84 fd       	sbrc	r24, 4
			data('4');
 316:	03 c0       	rjmp	.+6      	; 0x31e <main+0x88>
 318:	84 e3       	ldi	r24, 0x34	; 52
 31a:	0b df       	rcall	.-490    	; 0x132 <data>
		}
		
		//check 7
		else if ((PINJ & 0b00100000) == 0){
 31c:	06 c0       	rjmp	.+12     	; 0x32a <main+0x94>
 31e:	f8 01       	movw	r30, r16
 320:	80 81       	ld	r24, Z
 322:	85 fd       	sbrc	r24, 5
			data('7');
 324:	02 c0       	rjmp	.+4      	; 0x32a <main+0x94>
 326:	87 e3       	ldi	r24, 0x37	; 55
 328:	04 df       	rcall	.-504    	; 0x132 <data>
	
		}
		
		
		PORTJ = 0b11111101;
 32a:	f7 01       	movw	r30, r14
		//check 2
		if ((PINJ & 0b00001000) == 0){
 32c:	c0 82       	st	Z, r12
 32e:	f8 01       	movw	r30, r16
 330:	80 81       	ld	r24, Z
 332:	83 fd       	sbrc	r24, 3
			data('2');
 334:	03 c0       	rjmp	.+6      	; 0x33c <main+0xa6>
 336:	82 e3       	ldi	r24, 0x32	; 50
 338:	fc de       	rcall	.-520    	; 0x132 <data>
		}
		
		//check 5
		else if ((PINJ & 0b00010000) == 0){
 33a:	0d c0       	rjmp	.+26     	; 0x356 <main+0xc0>
 33c:	f8 01       	movw	r30, r16
 33e:	80 81       	ld	r24, Z
 340:	84 fd       	sbrc	r24, 4
			
			data('5');
 342:	03 c0       	rjmp	.+6      	; 0x34a <main+0xb4>
 344:	85 e3       	ldi	r24, 0x35	; 53
 346:	f5 de       	rcall	.-534    	; 0x132 <data>
		}
		
		//check 8
		else if ((PINJ & 0b00100000) == 0){
 348:	06 c0       	rjmp	.+12     	; 0x356 <main+0xc0>
 34a:	f8 01       	movw	r30, r16
 34c:	80 81       	ld	r24, Z
 34e:	85 fd       	sbrc	r24, 5
			
			data('8');
 350:	02 c0       	rjmp	.+4      	; 0x356 <main+0xc0>
 352:	88 e3       	ldi	r24, 0x38	; 56
		}
		
		PORTJ = 0b11111110;
 354:	ee de       	rcall	.-548    	; 0x132 <data>
 356:	f7 01       	movw	r30, r14
		//check 3
		if ((PINJ & 0b00001000) == 0){
 358:	d0 82       	st	Z, r13
 35a:	f8 01       	movw	r30, r16
 35c:	80 81       	ld	r24, Z
			data('3');
 35e:	83 fd       	sbrc	r24, 3
 360:	03 c0       	rjmp	.+6      	; 0x368 <main+0xd2>
 362:	83 e3       	ldi	r24, 0x33	; 51
 364:	e6 de       	rcall	.-564    	; 0x132 <data>
		}
		
		//check 6
		else if ((PINJ & 0b00010000) == 0){
 366:	18 c0       	rjmp	.+48     	; 0x398 <main+0x102>
 368:	f8 01       	movw	r30, r16
 36a:	80 81       	ld	r24, Z
			data('6');
 36c:	84 fd       	sbrc	r24, 4
 36e:	03 c0       	rjmp	.+6      	; 0x376 <main+0xe0>
 370:	86 e3       	ldi	r24, 0x36	; 54
 372:	df de       	rcall	.-578    	; 0x132 <data>
		}
		
		//check 9
		else if ((PINJ & 0b00100000) == 0){
 374:	11 c0       	rjmp	.+34     	; 0x398 <main+0x102>
 376:	f8 01       	movw	r30, r16
			data('9');
 378:	80 81       	ld	r24, Z
 37a:	85 fd       	sbrc	r24, 5
 37c:	03 c0       	rjmp	.+6      	; 0x384 <main+0xee>
		}
		
		else if((PINJ & 0b01000000) == 0){
 37e:	89 e3       	ldi	r24, 0x39	; 57
 380:	d8 de       	rcall	.-592    	; 0x132 <data>
 382:	0a c0       	rjmp	.+20     	; 0x398 <main+0x102>
 384:	f8 01       	movw	r30, r16
			cmd(0x01);
 386:	80 81       	ld	r24, Z
 388:	86 fd       	sbrc	r24, 6
 38a:	06 c0       	rjmp	.+12     	; 0x398 <main+0x102>
			data('#');
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	d7 de       	rcall	.-594    	; 0x13e <cmd>
 390:	83 e2       	ldi	r24, 0x23	; 35
			data(str[0]);
 392:	cf de       	rcall	.-610    	; 0x132 <data>
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	cd de       	rcall	.-614    	; 0x132 <data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 398:	87 ea       	ldi	r24, 0xA7	; 167
 39a:	91 e6       	ldi	r25, 0x61	; 97
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <main+0x106>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <main+0x10c>
 3a2:	00 00       	nop
 3a4:	a3 cf       	rjmp	.-186    	; 0x2ec <main+0x56>

000003a6 <__vector_1>:
		_delay_ms(100);
		
		
    }
}
ISR(INT0_vect){
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	0b b6       	in	r0, 0x3b	; 59
 3b2:	0f 92       	push	r0
 3b4:	2f 93       	push	r18
 3b6:	3f 93       	push	r19
 3b8:	4f 93       	push	r20
 3ba:	5f 93       	push	r21
 3bc:	6f 93       	push	r22
 3be:	7f 93       	push	r23
 3c0:	8f 93       	push	r24
 3c2:	9f 93       	push	r25
 3c4:	af 93       	push	r26
 3c6:	bf 93       	push	r27
 3c8:	ef 93       	push	r30
 3ca:	ff 93       	push	r31
	PORTG ^=(1<<0);
 3cc:	94 b3       	in	r25, 0x14	; 20
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	89 27       	eor	r24, r25
 3d2:	84 bb       	out	0x14, r24	; 20
	PORTG |=(1<<1);
 3d4:	a1 9a       	sbi	0x14, 1	; 20
 3d6:	2f e7       	ldi	r18, 0x7F	; 127
 3d8:	88 e3       	ldi	r24, 0x38	; 56
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	21 50       	subi	r18, 0x01	; 1
 3de:	80 40       	sbci	r24, 0x00	; 0
 3e0:	90 40       	sbci	r25, 0x00	; 0
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <__vector_1+0x36>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__vector_1+0x40>
 3e6:	00 00       	nop
	_delay_ms(400);
	PORTG &=~(1<<1);
 3e8:	a1 98       	cbi	0x14, 1	; 20
	cmd(0b00001111);
 3ea:	8f e0       	ldi	r24, 0x0F	; 15
 3ec:	a8 de       	rcall	.-688    	; 0x13e <cmd>
	wel();
 3ee:	ad de       	rcall	.-678    	; 0x14a <wel>
 3f0:	2f e7       	ldi	r18, 0x7F	; 127
 3f2:	89 ea       	ldi	r24, 0xA9	; 169
 3f4:	93 e0       	ldi	r25, 0x03	; 3
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	80 40       	sbci	r24, 0x00	; 0
 3fa:	90 40       	sbci	r25, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <__vector_1+0x50>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
	_delay_ms(1200);
	cmd(0b00001111);
 402:	8f e0       	ldi	r24, 0x0F	; 15
 404:	9c de       	rcall	.-712    	; 0x13e <cmd>
	regi();
 406:	d5 de       	rcall	.-598    	; 0x1b2 <regi>
 408:	2f e3       	ldi	r18, 0x3F	; 63
 40a:	8d e0       	ldi	r24, 0x0D	; 13
 40c:	93 e0       	ldi	r25, 0x03	; 3
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	_delay_ms(1000);
	cmd(0x01);
 418:	00 00       	nop
 41a:	81 e0       	ldi	r24, 0x01	; 1
	under10();
 41c:	90 de       	rcall	.-736    	; 0x13e <cmd>
 41e:	fd de       	rcall	.-518    	; 0x21a <under10>
	cmd(0xC0);
 420:	80 ec       	ldi	r24, 0xC0	; 192
 422:	8d de       	rcall	.-742    	; 0x13e <cmd>
 424:	ff 91       	pop	r31
	
}
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0b be       	out	0x3b, r0	; 59
 440:	0f 90       	pop	r0
 442:	0f be       	out	0x3f, r0	; 63
 444:	0f 90       	pop	r0
 446:	1f 90       	pop	r1
 448:	18 95       	reti

0000044a <strncat>:
 44a:	fb 01       	movw	r30, r22
 44c:	dc 01       	movw	r26, r24
 44e:	0d 90       	ld	r0, X+
 450:	00 20       	and	r0, r0
 452:	e9 f7       	brne	.-6      	; 0x44e <strncat+0x4>
 454:	11 97       	sbiw	r26, 0x01	; 1
 456:	41 50       	subi	r20, 0x01	; 1
 458:	50 40       	sbci	r21, 0x00	; 0
 45a:	28 f0       	brcs	.+10     	; 0x466 <strncat+0x1c>
 45c:	01 90       	ld	r0, Z+
 45e:	00 20       	and	r0, r0
 460:	0d 92       	st	X+, r0
 462:	c9 f7       	brne	.-14     	; 0x456 <strncat+0xc>
 464:	08 95       	ret
 466:	1c 92       	st	X, r1
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
